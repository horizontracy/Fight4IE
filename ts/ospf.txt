ts ospf
题目要求：r1到r21和r22之间的网络，应该负载分担

截图：
O IA	134.56.78.48	[110/30]	via 123.45.67.18, 00:00:16, Ethernet0/2
 						[110/30]	via 123.45.67.6, 00:00:16, Ethernet0/1

错误点：
1. r22和r5之间的链路掩码配错了
2. r22的ospf进程下没有no passive e0/0
3. r21接口点掩码和ospf cost错误
4. r3上面进行了路由汇总，删除掉
5. r5的ospf进程下有max－metric router－las，删除掉
6. r1上有distribute－list过滤了指向r3的路由

［详解］
到r1上sh ip ospf database sum 134.56.78.48
查看ospf数据库，发现ospf路由数据库为空的
到r3和r5上查看，因为r3和r5应该既有area1的lsa信息，又有area0的lsa信息
sh ip ospf database sum 134.56.78.48
发现r5上的ospf路由数据库也是空的
这时候怀疑r5和r22的邻居关系是否正常
sh ip ospf neigh
发现r5只有和r1有邻居关系，没有和r22的邻居关系
sh ip ospf int br，查看是否有接口是否配置正确：是否宣告、属于哪个area、ip和mask是否正确、cost值
发现e0/2的ip mask配置是29位点掩码，而截图上应该是30位的掩码，找到错点
同样地，在r22上看sh ip ospf int br，查看ospf接口信息
看到r22上的e0/0配置的掩码不正确：134.56.78.42/29，这里掩码也错了，图上是29位的掩码，找到错点
修改方法：
r5上sh run int e0/2
看到interface Ethernet0/2
	ip address 134.56.78.41 255.255.255.248
因修改为：
	ip address 134.56.78.41 255.255.255.252
r22的修改方法同上

但是r22和r5虽然掩码错了，但是却是一致的。掩码缺失需要修改，但是为何ospf邻居关系没有起来？
到r22上查看sh run | se ospf
其结果为：
router ospf 1
	router-id 134.22.22.22
	passive-interface default
	no passive-interface Ethernet0/1
	network 134.22.22.22 0.0.0.0 area 1
	network 134.56.78.42 0.0.0.0 area 1
	network 134.56.78.50 0.0.0.0 area 1
		redistribute ospf 1

发现ospf进程下配置了passive-interface default，这条命令会默认所有ospf的接口都是被passive掉的，即无法和对方建立邻居关系
r22上只是单独地no passive掉了e0/1，应该e0/0也no passive放出来
router ospf 1
	no passive-interface e0/0

这时，两边子网掩码一致，端口也no passive出来，可以看到log信息说邻居关系已经建立

到r3上检查sh ip ospf database sum 134.56.78.48，发现r3也没有ospf路由数据库
查看r3上的ospf邻居关系：sh ip ospf neigh
发现r3和r1以及r21的ospf邻居关系正常，也就是说，只要r21宣告了e0/1接口，至少r3能够得到这条路由，因为r3和r21是在同一个区域里的
到r21上看是否宣告了e0/1: sh ip ospf int br
发现e0/1是宣告出去了的，但是发现mask是30位的，和r22这一侧的掩码不一致，因此也需要修改r21的e0/1接口的子网掩码为29
然后检查：sh run int e0/1如下：
interface Ethernet0/1
	ip address 134.56.78.49 255.255.255.252
	ip ospf cost 1
子网掩码缺失对了，但是这里配了cost值，肯定会出问题，问题后面会说，暂时不删掉。

之前r22和r21没有建立ospf邻居，这时sh ip ospf neigh可以看到它们的邻居关系已经建立

但是r21即使掩码不对，r3也应该能够看到r21的路由信息，出现目前r3的ospf路由数据库看不任何信息的情况只可能是做了路由汇总。
到r3上sh ip route | in 134.56.78 (考试时路由表会很多，这里include会只显示含有134.56.78的路由信息)
看到：
O 	134.56.78.0/24 is a summary, 00:09:48, Null0
ospf的汇总特性：汇总后会在本地的路由表中产生一个指向空接口的路由，因此看到这条指向空接口的路由，一定是ospf进行了路由汇总
并且汇总后的网络号134.56.78.0/24是包含了需要的网络号
查看ospf进程配置：sh run | se ospf，看到：
router ospf 1
	router-id 123.3.3.3
	area 1 range 134.56.78.0 255.255.255.0 	#路由汇总
	network 134.3.3.3 0.0.0.0 area 0
	network 134.45.67.6 0.0.0.0 area 0
	network 134.56.78.37 0.0.0.0 area 1
应该直接删掉路由汇总
no area 1 range 134.56.78.0 255.255.255.0
再检查：sh ip ospf database sum 134.56.78.48
终于可以看到ospf路由数据库，可以看到：
area信息
advertising router: 123.3.3.3(通告路由器，即这条路由是由谁产生)
link state id(这条路由的网络号)
掩码
metric值
且r3和r5上看ospf数据库应该是一样的，因为同在一个area

看到r3的metric值时655xx，因此r5一定做了max－metric
在r5下
sh run | se ospf
看到如下
router ospf 1
router-id 123.5.5.5
max-metric router-lsa		＃效果是把该路由器产生的所有lsa路由的metric值变到最大，找到错点，删掉该命令，使metric值恢复
network 123.5.5.5 0.0.0.0 area 0
network 123.45.67.18 0.0.0.0 area 0
network 134.56.78.41 0.0.0.0 area 1

在r3上
sh ip ospf database sum 134.56.78.48 
删掉后在r3上看ospf路由数据库，发现来自r5的路由的metric已经从655xx变为20，而由r3产生的路由的metric是11
20对不对呢？答案是数以太网口，经过1个接口就是＋10，20是正确的
r3的metric是11，这是不正确的，因此在r3这一侧，肯定有接口改动了cost值
影响r3看到metric值的接口只有r3的e0/2和r21的e0/1，因此要看这2个接口的cost值
r3的e0/2的cost值默认是10，而r21的e0/1被改成了1
如何看cost值？以r21为例
sh ip ospf int br 	＃有cost这一栏，可以看到lo0的e0/1的cost是1
如何修改？
到r21上
sh run int e0/1
看到如下：
ip ospf cost 1 	#修改：no ip ospf cost 1
修改完后，到r1或者r3上看ospf路由数据库，效果和r3应该是一致的
看到r3和r5的ospf路由的metric值时相同的，为20，ok

至此，路由已经ok，剩下的就是需要再路由表中看到负载分担
在r1上
sh ip route 	＃找134.56.78.48的路由，应该有负载分担，但是没有看到负载分担的现象，需要找原因
				＃只有指向e0/2接口点，即指向r5的
				＃而指向r3的路由没有出现
在数据库ok的情况下（看到r3、r5路由，且metric相等，前缀掩码都一样），怀疑ospf到路由表的过程中有分发列表过滤掉路由
怀疑配了分发列表
在r1上
sh run | se ospf
看到：
router ospf 1
mpls ldp autoconfig
router-id 123.1.1.1
network 123.0.0.0 0.255.255.255 area 0
distribute-list 1 in Ethernet0/1 	＃配了分发列表，找到错点
其含义为：只有在访问控制列表1里面被permit的路由才能被放进路由表，而当其他的路由的出口是e0/1时都会被干掉。
如何修改？
在访问控制列表1中，将影响路由的条目给放开
sh ip access-list 1
看到：
standard ip access list 1
10 deny 134.56.78.48, wildcard bits 0.0.0.7(4 matches)	#反掩码是7，即地址为.48-.55，.48是在其中的
20 permit any (6 matches)
为了不让10 deny这条访问列表影响到，在其前面，例如5，配置允许的列表，如下：
(config) ip access-list standard 1
(config) 5 permit 134.56.78.48 	#其含义为，放通134.56.78.48这条路由，标准列表不写反掩码的话，默认为0.0.0.0，即精准匹配该路由
show出访问控制列表来验证：
sh ip access-list 1
看到：
standard ip access list 1
5 permit 134.56.78.48 (1 match)	#看到这里match说明匹配到了，而且5在10的前面说明5比10优先生效，排掉错点
10 deny ..
20 permit ..
再次show路由表验证：
sh ip route ospf
看到如截图所示的负载效果









